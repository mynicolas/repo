
// ---dialog move start---

ModelDialog = function(){
    var px = 'px';
    var isIE = /msie/.test(navigator.userAgent.toLowerCase());

    function getViewSize(){
        return {
            w: window['innerWidth'] || document.documentElement.clientWidth,
            h: window['innerHeight'] || document.documentElement.clientHeight}
    }

    function getFullSize(){
        var w = Math.max(document.documentElement.clientWidth, document.body.clientWidth) + Math.max(document.documentElement.scrollLeft, document.body.scrollLeft);
        var h = Math.max(document.documentElement.clientHeight, document.body.clientHeight) + Math.max(document.documentElement.scrollTop, document.body.scrollTop);
        w = Math.max(document.documentElement.scrollWidth, w);
        h = Math.max(document.documentElement.scrollHeight, h);
        return {
            w: w,
            h: h
        };
    }

    function $(tag){
        return new $.prototype.init(tag);
    }

    $.prototype = {
        init: function(tag){
            this[0] = document.createElement(tag);
            return this;
        },
        setCls : function(cls){
            this[0].className = cls;
            return this;
        },
        setSty: function(name,val){
        name == 'opacity' ?
        isIE ?
        this[0].style.filter = 'Alpha(Opacity=' + val*100 + ')':
        this[0].style.opacity = val:
        this[0].style[name] = val;
        return this;
        },
        css : function(str){
            this[0].style.cssText = str;
            return this;
        },
        html: function(str){
            this[0].innerHTML = str;
            return this;
        }
    };

    $.prototype.init.prototype = $.prototype;
        function ModelDialog(opt){
        var windowWidth = document.body.clientWidth;
        var windowHeight = document.body.clientHeight;
        this.dialogWidth = windowWidth * 0.3;
        this.dialogHeight = windowHeight * 0.3;
        this.dialogCls = opt.dialogCls || 'dialog';
        this.headCls = opt.headCls || 'dialogHead';
        this.btnCloseCls = opt.btnCloseCls || 'dialogClose';
        this.bodyCls = opt.bodyCls || 'dialogContent';
        this.shadowBg = opt.shadowBg || 'gray';
        this.shadowOpy = opt.shadowOpy || '0.5';
        this.caption = opt.caption || "对话框标题";
        this.template = opt.template || '';
        this.dragable = opt.dragable != false;
        this.dragInWin = opt.dragInWin != false;
        if(opt.area){
            this.area = opt.area;
        }else{
            this.area = [20, windowWidth - this.dialogWidth  - 20, 20, windowHeight- this.dialogHeight - 40];
        }
        this.dialog = null;
        this.head = null;
        this.label = null;
        this.btnClose = null;
        this.content = null;
        this.shadow = null;
        this.init();
    }

    ModelDialog.prototype = {
        init: function(){
            var _this = this;
            var dialogCss = 'position: absolute;' +
                            'z-index: 100;' +
                            'width: 30%;' +
                            'height: 30%;';
            var dialogHeadCss = 'background-color: #436EEE;' +
                                'cursor: pointer;';
            var dialogHeadLabelCss = 'color: #ffffff;' +
                                     'padding: 5px 0 5px 5px;' +
                                     'margin-left: 30px;' +
                                     'font-size: 18px;' +
                                     'font-weight: 700;' +
                                     'float: left;' +
                                     'width: auto;';
            var dialogCloseCss = 'float: right;' +
                                 'padding: 6px 5px 0;';
            var dialogCloseImgCss = 'background-color: #ffffff;';
            var dialogContentCss = 'height: 100%;' +
                                   'background-color: #ffffff;' +
                                   'border: 1px solid #436EEE;' +
                                   'padding: 5px;' +
                                   'overflow-x: hidden;' +
                                   'overflow-y: auto;';

            this.dialog = $('div').setCls(this.dialogCls).css(dialogCss)[0];
            this.head = $('div').setCls(this.headCls).css(dialogHeadCss)[0];
            this.label = $('div').html(this.caption).css(dialogHeadLabelCss)[0];
            this.label.id = "label";
            this.btnClose = $('div').setCls(this.btnCloseCls).css(dialogCloseCss)[0];
            this.closeImg = $('img').setCls("closeImg").css(dialogCloseImgCss)[0];
            this.closeImg.id = "closeImg";
            this.closeImg.src = "/repo/static/close.png";
//            this.contentBody = $('div').setCls("contentBody").css(dialogContentBodyCss)[0];
            this.clearFloat1 = $('div').setCls("clearFloat")[0];
            this.clearFloat2 = $('div').setCls("clearFloat")[0];
            this.clearFloat3 = $('div').setCls("clearFloat")[0];
            this.on(this.btnClose, 'click',function(){
                _this.onClose();
        });

        this.head.appendChild(this.label);
        this.head.appendChild(this.btnClose);
        this.btnClose.appendChild(this.closeImg);
        this.head.appendChild(this.clearFloat1);
        this.content = $('div').setCls(this.bodyCls).css(dialogContentCss)[0];
//        this.content.appendChild(this.contentBody);
        this.content.appendChild(this.clearFloat2);
        this.setContent(this.template);
        this.dialog.appendChild(this.head);
        this.dialog.appendChild(this.content);
        this.dialog.appendChild(this.clearFloat3);
        this.createShadow();
        document.body.appendChild(this.shadow);
        document.body.appendChild(this.dialog);
        this.moveToCenter();
        // 计算拖拽范围
        // 标准模式下：clientWidth=width+padding；offsetWidth=width+padding+border
        if(this.dragable){
            if(this.dragInWin){
                var maxX = getViewSize().w - this.dialog.offsetWidth;
                var maxY = getViewSize().h - this.dialog.offsetHeight;
                this.dragdrop(this.dialog, {
                    bridge : this.head,
                    area : [0,maxX,0,maxY]
                });
                return;
            }
            if(this.area){
                this.dragdrop(this.dialog,{
                    bridge: this.head,
                    area: this.area
                    });
                return;
            }
            this.dragdrop(this.dialog,{
                bridge: this.head
            });
            }
        },
        destroy: function(){
            this.dialog = null;
            this.head = null;
            this.label = null;
            this.btnClose = null;
            this.content = null;
            this.shadow = null;

            this.closeImg = null;
//            this.contentBody = null;
            this.clearFloat = null;
        },
        createShadow: function(){
            var str = 'position: absolute; left: 0px; top: 0px; z-index: 1' +
            ';width:' + getFullSize().w + px +
            ';height:' + getFullSize().h + px +
            ';background:' + this.shadowBg +
            ';opacity:' + this.shadowOpy +
            ';filter:Alpha(Opacity=' + this.shadowOpy*100 + ');';
            var _this = this;
            this.shadow = $("div").setCls('dialogShadow').css(str)[0];
            this.on(window,'resize',function(){
            _this.shadow.style.width = getFullSize().w + px;
            _this.shadow.style.height = getFullSize().h + px;
            _this.moveToCenter();
            });
        },
        moveTo: function(x, y){
            this.dialog.style.left = x + px;
            this.dialog.style.top = y + px;
        },
        moveToCenter: function(){
            var size = getViewSize();
            var x = (size.w-50)/2 - (this.dialog.clientWidth-50)/2;
            var y = (size.h- 50)/2 - (this.dialog.clientHeight-50)/2 + document.documentElement.scrollTop;
            this.moveTo(x, y);
        },
        setCaption: function(v){
            this.caption = v;
            this.label.innerHTML = v;
        },
        setContent: function(str){
            this.template = str;
            this.content.innerHTML = str;
//            this.contentBody.innerHTML = str;
        },
        onClose: function(){
            document.body.removeChild(this.dialog);
            document.body.removeChild(this.shadow);
            if(this['onbi']){
                this.onbi();
            }
            this.destroy();
        },
        on: function(el, type, fn){
            el.addEventListener ?
            el.addEventListener(type, fn, false):
            el.attachEvent ?
            el.attachEvent("on" + type, fn):
            el['on'+type] = fn;
        },
        un: function(el,type,fn){
            el.removeEventListener ?
            el.removeEventListener(type, fn, false):
            el.detachEvent ?
            el.detachEvent("on" + type, fn):
            el['on'+type] = null;
        },
        dragdrop: function(){
            return function(el,opt){
                var _this=this, ele, diffX, diffY, dragX=true,dragY=true, minX, maxX, minY, maxY, bridge;
                ele = el;
                opt && opt.dragX===false && (dragX=false);
                opt && opt.dragY===false && (dragY=false);
                opt && opt.area && typeof opt.area[0]==='number' && (minX=opt.area[0]);
                opt && opt.area && typeof opt.area[1]==='number' && (maxX=opt.area[1]);
                opt && opt.area && typeof opt.area[2]==='number' && (minY=opt.area[2]);
                opt && opt.area && typeof opt.area[3]==='number' && (maxY=opt.area[3]);
                opt && opt.bridge && (bridge=opt.bridge);
                ele.style.position = 'absolute';
                bridge ?
                this.on(bridge,'mousedown',mousedown):
                this.on(ele,'mousedown',mousedown);
                function mousedown(e){
                    e = e || window.event;
                    ele.style.cursor = 'pointer';
                    if(ele.setCapture){//IE
                        _this.on(ele, "losecapture", mouseup);
                        ele.setCapture();
                        e.cancelBubble = true; //IE
                    }else if(window.captureEvents){//标准DOM
                        e.stopPropagation();
                        _this.on(window, "blur", mouseup);
                        e.preventDefault();
                    }
                    _x = e.clientX;
                    _y = e.clientY;
                    diffX = e.clientX - ele.offsetLeft;
                    diffY = e.clientY - ele.offsetTop;
                    _this.on(document,'mousemove',mousemove);
                    _this.on(document,'mouseup',mouseup);
                }
                function mousemove(e){
                    e = e || window.event;
                    var moveX = e.clientX - diffX,
                    moveY = e.clientY - diffY;
                    moveX < minX && (moveX = minX); // left 最小值
                    moveX > maxX && (moveX = maxX); // left 最大值
                    moveY < minY && (moveY = minY); // top 最小值
                    moveY > maxY && (moveY = maxY); // top 最大值
                    dragX && (ele.style.left = moveX + 'px');
                    dragY && (ele.style.top =  moveY + 'px');
                }
                function mouseup(e){
                    ele.style.cursor = 'default';
                    _this.un(document,'mousemove',mousemove);
                    _this.un(document,'mouseup',mouseup);
                    if(ele.releaseCapture){//IE
                        _this.un(ele, "losecapture", mouseup);
                        ele.releaseCapture();
                    }
                    if(window.releaseEvents){//标准DOM
                        _this.un(window, "blur", mouseup);
                    }
                }
            }
        }()
    };
    return ModelDialog;
}();

// +++ dialog move end +++


// notice: 创建help对话框
// variable:
//      item: 传入的DOM对象
//      helpContent: 对话框所要显示的help文档内容
// return: null
function renderHelpDialog(element, helpContent){
    var dialogHead = element.parentElement.getElementsByTagName("a")[0].innerHTML + " " + "help";
    var dialog = new ModelDialog({
        dragInWin : false,
        caption: dialogHead,
        template: helpContent
    });
}

// notice: 异步post操作，获取help文档并显示help对话框
// variable:
//      element: 传入的DOM对象
// return: null
function post(element){
    // 创建XMLHttpRequest对象
    var xmlHttp;
    if(window.XMLHttpRequest){// 标准浏览器
        xmlHttp = new XMLHttpRequest();
    }else{// IE6及以下版本浏览器
        xmlHttp = new ActiveXObject('Microsoft.XMLHTTP');
    }

    xmlHttp.onreadystatechange = function(){
        if(xmlHttp.readyState == 4 && xmlHttp.status == 200){// 当post擦做完成时进行的操作
            renderHelpDialog(element, xmlHttp.responseText); // 显示对话框
        }
    };
    var repoItem = element.parentElement.children[0].getElementsByTagName('a')[0].innerHTML;
    xmlHttp.open("POST", 'help', true);
    xmlHttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    xmlHttp.send(repoItem);
}

